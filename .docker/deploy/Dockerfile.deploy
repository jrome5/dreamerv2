FROM nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04

ENV DEBIAN_FRONTEND=noninteractive

ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

# set default DDS to Cyclone
ENV ROS_DISTRO=rolling
ENV RMW_IMPLEMENTATION rmw_cyclonedds_cpp
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}compute,video,utility
ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    git xvfb \
    libglu1-mesa libglu1-mesa-dev libgl1-mesa-dev libosmesa6-dev mesa-utils freeglut3 freeglut3-dev \
    libglfw3 libglfw3-dev zlib1g zlib1g-dev libsdl2-dev libjpeg-dev lua5.1 liblua5.1-0-dev libffi-dev \
    build-essential cmake pkg-config software-properties-common gettext \
    ffmpeg patchelf swig unrar unzip zip curl wget tmux

# System packages.
RUN apt-get update && apt-get install -y \
  ffmpeg \
  mesa-utils \
  git \
  libgl1-mesa-dev \
  python3-pip \
  unrar \
  wget \
  && apt-get clean

# Python packages.
RUN pip3 install --no-cache-dir \
  opencv-contrib-python \
  pyvirtualdisplay \
  gym==0.21.0 \
  ruamel.yaml \
  tensorflow==2.6.0 \
  pybullet \
  protobuf==3.19.0 \
  numpy==1.23.5 \
  tensorflow_probability==0.12.2 \
  keras==2.6 \
  Image

# DreamerV2.
ENV TF_XLA_FLAGS --tf_xla_auto_jit=2

# set up ROS workspace
ENV ROS_UNDERLAY /root/dreamer_ws/install
WORKDIR $ROS_UNDERLAY/..

# base system installations
RUN apt-get update && \
    apt-get install -y neovim software-properties-common build-essential sudo git curl wget python3-pip libspdlog-dev \
    libeigen3-dev lsb-release ffmpeg libsm6 libxext6 zstd && \
    apt-get upgrade -y

# install ROS
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

RUN apt-get update && apt-get upgrade -y && \ 
    apt-get install -y ros-${ROS_DISTRO}-desktop && \
    apt-get install -y python3-rosdep && \
    apt-get install -y python3-vcstool && \
    apt-get install -y python3-colcon-common-extensions

RUN pip3 install colcon-mixin && \
    colcon mixin add default https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && \
    colcon mixin update default

RUN rosdep init && \
    rosdep fix-permissions && \
    rosdep update

# install ros dependencies and build workspace
RUN . /opt/ros/${ROS_DISTRO}/setup.sh && \
    apt-get update && \
    apt-get install -y ros-${ROS_DISTRO}-rmw-cyclonedds-cpp \
    wget && \
    apt-get update && \
    rosdep update && \
    DEBIAN_FRONTEND=noninteractive \
    rosdep install --from-paths src --ignore-src -r -y --rosdistro ${ROS_DISTRO} && \
    colcon build --parallel-workers $(nproc) --symlink-install \
    --event-handlers console_direct+ --base-paths src \
    --cmake-args ' -DCMAKE_BUILD_TYPE=Release' \
    ' -DCMAKE_CXX_FLAGS="-Wl,--allow-shlib-undefined"' \
    ' --no-warn-unused-cli' && \ 
    rm -rf /var/lib/apt/lists/* 

RUN echo "source /opt/ros/rolling/setup.bash" >> ~/.bashrc
# create entrypoint
COPY .docker/ros_entrypoint.sh /sbin/ros_entrypoint.sh
RUN sudo chmod 755 /sbin/ros_entrypoint.sh
ENTRYPOINT ["/sbin/ros_entrypoint.sh"]